{"version":3,"sources":["data.js","components/Header/Header.jsx","components/Card/Card.jsx","components/Finish/Finish.jsx","App.jsx","index.jsx"],"names":["isPrime","num","i","primeNumber","n","arr","push","map","v","number","display","array","length","j","Math","floor","random","shuffle","uniqueCardsArray","slice","Header","moves","bestScore","handleRestart","Container","className","onClick","localStorage","getItem","Card","card","index","isInactive","isFlipped","isDisabled","classnames","Finish","showModal","Dialog","open","disableEscapeKeyDown","DialogTitle","id","DialogContent","DialogContentText","DialogActions","color","swap","temp","shuffleCards","App","useState","concat","cards","setCards","openCards","setOpencards","matchedCards","setMatchedcards","setMoves","setShowModal","shouldDisableAllCards","setShouldDisableAllCards","JSON","parse","Number","POSITIVE_INFINITY","setBestScore","timeout","useRef","evaluate","first","second","prev","current","setTimeout","handleCardClick","clearTimeout","useEffect","Object","keys","highScore","min","setItem","checkCompletion","checkIsFlipped","includes","checkIsInactive","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01f72d58.chunk.js","sourcesContent":["function isPrime(num) {\n  for ( let i = 2; i < num; i++ ) {\n      if (num % i === 0) {\n          return false;\n      }\n  }\n  return true;\n}\n\nfunction display(n) {\n  let arr = [2];\n  for (let i = 3; i < n; i+=2) {\n      if (isPrime(i)) {\n          arr.push(i);\n      }\n  }\n  \n  return arr.map((v) => ({number: v}));\n}\n\nconst primeNumber = display(100);\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nshuffle(primeNumber);\nconst uniqueCardsArray = primeNumber.slice(0, 9)\n\nexport default uniqueCardsArray;","import React from \"react\";\nimport  PropTypes from 'prop-types';\nimport \"./Header.scss\";\nimport { Container } from \"react-bootstrap\";\nimport { FaRedo } from \"react-icons/fa\";\n\nconst Header = ({ moves, bestScore, handleRestart }) => {\n  return (\n    <div>\n      <h1>Memory Game</h1>\n      <Container>\n        <div className=\"sub-header\">\n          <div className=\"moves\">\n            <span className=\"bold\">Moves:</span>\n            {moves}\n          </div>\n          <div className=\"reshuffle\">\n            <button onClick={handleRestart}>\n              <FaRedo />\n            </button>\n          </div>\n          {localStorage.getItem(\"bestScore\") && (\n            <div className=\"high-score\">\n              <span>Best Score:</span>\n              {bestScore}\n            </div>\n          )}\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  handleRestart: PropTypes.func.isRequired,\n  bestScore: PropTypes.number.isRequired,\n  moves: PropTypes.number.isRequired,\n};\n\nexport default Header;\n","import React from \"react\";\nimport  PropTypes from 'prop-types';\nimport \"./Card.scss\";\n\nimport classnames from \"classnames\";\n\nconst Card = ({ onClick, card, index, isInactive, isFlipped, isDisabled }) => {\n  const handleClick = () => {\n    !isFlipped && !isDisabled && onClick(index);\n  };\n  \n  return (\n    <div\n      className={classnames(\"card\", {\n        \"is-flipped\": isFlipped,\n        \"is-inactive\": isInactive,\n      })}\n      onClick={handleClick}\n    >\n      <div className=\"card-face card-font-face\">\n        \n      </div>\n      <div className=\"card-face card-back-face\">\n        {card.number}\n      </div>\n    </div>\n  );\n};\n\nCard.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  card: PropTypes.shape({\n    index: PropTypes.number,\n  }).isRequired,\n  isInactive: PropTypes.bool.isRequired,\n  isFlipped: PropTypes.bool.isRequired, \n  isDisabled: PropTypes.bool.isRequired,\n};\n\nexport default Card;\n","import React from \"react\";\nimport  PropTypes from 'prop-types';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport \"./Finish.scss\";\n\nconst Finish = ({ handleRestart, showModal, bestScore, moves }) => {\n  return (\n    <div>\n      <Dialog\n        open={showModal}\n        disableEscapeKeyDown\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <h2>Memory Game</h2>\n        <DialogTitle id=\"alert-dialog-title\">\n          Hurray !!! You completed the game !!\n        </DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            You got {moves} moves.Your best score is {bestScore}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <button onClick={handleRestart} color=\"primary\">\n            Restart\n          </button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nFinish.propTypes = {\n  handleRestart: PropTypes.func.isRequired,\n  Dialog: PropTypes.shape({\n    showModal: PropTypes.bool.isRequired,\n    disableEscapeKeyDown: PropTypes.bool,\n  }),\n  bestScore: PropTypes.number.isRequired,\n  moves: PropTypes.number.isRequired,\n  isInactive: PropTypes.bool,\n  isFlipped: PropTypes.bool, \n  isDisabled: PropTypes.bool,\n};\n\nexport default Finish;","import React, { useEffect, useRef, useState } from \"react\";\nimport uniqueCardsArray from \"./data.js\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./components/Header/Header\";\nimport Card from \"./components/Card/Card\";\nimport Finish from \"./components/Finish/Finish\";\nimport './App.scss';\n\nfunction swap(array, i, j) {\n  const temp = array[i];\n  array[i] = array[j];\n  array[j] = temp;\n};\n\nfunction shuffleCards(array) {\n  const length = array.length;\n\n  for (let i = length; i > 0; i--) {\n    const randomIndex = Math.floor(Math.random() * i);\n    const currentIndex = i - 1;\n    swap(array, currentIndex, randomIndex);\n  }\n\n  return array;\n};\n\nconst App = () => {\n  const [cards, setCards] = useState(() =>\n    shuffleCards(uniqueCardsArray.concat(uniqueCardsArray))\n  );\n  const [openCards, setOpencards] = useState([]);\n  const [matchedCards, setMatchedcards] = useState({});\n  const [moves, setMoves] = useState(0);\n  const [showModal, setShowModal] = useState(false);\n  const [shouldDisableAllCards, setShouldDisableAllCards] = useState(false);\n  const [bestScore, setBestScore] = useState(\n    JSON.parse(localStorage.getItem(\"bestScore\")) || Number.POSITIVE_INFINITY\n  );\n  const timeout = useRef(null);\n\n  const disable = () => {\n    setShouldDisableAllCards(true);\n  };\n\n  const enable = () => {\n    setShouldDisableAllCards(false);\n  };\n\n  const checkCompletion = () => {\n    if (Object.keys(matchedCards).length === uniqueCardsArray.length) {\n      setShowModal(true);\n      const highScore = Math.min(moves, bestScore);\n      setBestScore(highScore);\n      localStorage.setItem(\"bestScore\", highScore);\n    }\n  };\n\n  const evaluate = () => {\n    const [first, second] = openCards;\n    enable();\n    if (cards[first].number === cards[second].number) {\n      setMatchedcards((prev) => ({ ...prev, [cards[first].number]: true }));\n      setOpencards([]);\n      \n      return;\n    }\n    timeout.current = setTimeout(() => {\n      setOpencards([]);\n    }, 500);\n  };\n\n  const handleCardClick = (index) => {\n    if (openCards.length === 1) {\n      setOpencards((prev) => [...prev, index]);\n      setMoves((moves) => moves + 1);\n      disable();\n    } else {\n      clearTimeout(timeout.current);\n      setOpencards([index]);\n    }\n  };\n  \n  useEffect(() => {\n    let timeout = null;\n    if (openCards.length === 2) {\n      timeout = setTimeout(evaluate, 300);\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n    // eslint-disable-next-line\n  }, [openCards]);\n\n  useEffect(() => {\n    checkCompletion();\n    // eslint-disable-next-line\n  }, [matchedCards]);\n\n  const checkIsFlipped = (index) => {\n    return openCards.includes(index);\n  };\n\n  const checkIsInactive = (card) => {\n    return Boolean(matchedCards[card.number]);\n  };\n  \n  const handleRestart = () => {\n    setMatchedcards({});\n    setOpencards([]);\n    setShowModal(false);\n    setMoves(0);\n    setShouldDisableAllCards(false);\n    setCards(shuffleCards(uniqueCardsArray.concat(uniqueCardsArray)));\n  };\n\n  return (\n    <div>\n      <Header\n        moves={moves}\n        bestScore={bestScore}\n        handleRestart={handleRestart}\n      />\n      <div className=\"card-cont\">\n        <div className=\"card-slot\">\n          {cards.map((card, index) => {\n            return (\n              <div key={index} className=\"card-uno\">\n                <Card\n                  key={index}\n                  card={card}\n                  index={index}\n                  isDisabled={shouldDisableAllCards}\n                  isInactive={checkIsInactive(card)}\n                  isFlipped={checkIsFlipped(index)}\n                  onClick={handleCardClick}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n      <Finish\n        showModal={showModal}\n        moves={moves}\n        bestScore={bestScore}\n        handleRestart={handleRestart}\n      />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}